[{"title":"01 | 数据结构与算法学习笔记 | 复杂度分析","date":"2019-12-29T16:17:16.000Z","path":"2019/12/30/01-数据结构与算法学习笔记-复杂度分析/","text":"数据结构与算法学习-复杂度分析1、什么是复杂度分析数据结构和算法本身解决的事“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，执行效率是算法的一个非常重要的考量指标。那如何来衡量代码的执行效率，可以通过时间复杂度分析和空间复杂度分析来进行衡量。 2、 为什么要进行复杂度分析目前网上有很多工具统计、监控执行的代码结果就能得到执行所占用的时间多少以及内存大小，但是这种统计方法有很大的局限性： 测试结果非常依赖测试环境； 测试结果受数据规模的影响很大； 3、大O复杂度表示法大O时间复杂度表示法，实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫做监禁事件复杂度，简称时间复杂度。 当 n 很大时，可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n2)。 4、时间复杂度分析4.1. 只关注循环次数最多的代码大O复杂度表示方法只是表示一种变化趋势，通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了，所以在分析一个算法、一段代码的复杂度的时候，也只关注循环次数最多的那一段代码就可以了。 4.2. 加法法则总的时间复杂度就等于量级最大的那段代码的时间复杂度，所以这整段代码的时间复杂度是O(n²)。 4.3. 乘法法则如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)T2(n)=O(f(n))O(g(n))=O(f(n)*g(n))。也就是说，假设 T1(n) = O(n)，T2(n) = O(n2)，则 T1(n) * T2(n) = O(n3)，所以嵌套代码的复杂度等于嵌套内外代码复杂度的乘积 5、常见时间复杂度分析常见的时间复杂度有以下7种： O(1): Canstant Complexity 常数复杂度 O(logn)/O(nlogn): Logarithmic Complexity 对数复杂度 O(n): Linear Complexity 线性时间复杂度 O(n²): N square Complexity 平方 O(n³): N cubic Complexity 立方 O(2ⁿ): Exponential Growth 指数 O(n!): Factorial 阶乘 5.1 O(1) 常数复杂度O(1)只是常量级时间复杂度的一种表示法，并不是指执行了一行代码。一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)，例如： 1234567int a = 1;int b = 2;int c = 3;int d = 4;for (int i = 0; i &lt; 100; i++) &#123; System.out.println(\"hello world\");&#125; 这段代码虽然有多行，也有循环，但循环中的i是常数100，所以它的时间复杂度还是O(1)。 5.2 O(logn)/O(nlogn)对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。 O(log₂n)代码示例： 1234int i = 1;while (i &lt;= n) &#123; i = i * 2&#125; 同理，O(log₃n)的代码示例： 1234int i = 1;while (i &lt;= n) &#123; i = i * 3&#125; 在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log₂n) 就等于 O(log₃n)。因此，在对数阶时间复杂度的表示方法里，忽略对数的“底”，统一表示为 O(logn)。 同样，O(nlogn) 就是指时间复杂度为O(logn)的代码循环了n遍，所以时间复杂度就是n * O(logn)，即O(nlogn)。 代码示例： 1234567int i = 1;int j = 1;for (; j &lt;= k; j++) &#123; while (i &lt;= n) &#123; i = i * 2; &#125;&#125; 5.3 O(n)O(n) 比较好理解，也就是代码执行了n遍，如： 1234int i = 1;for (; i &lt;= n; i++) &#123; System.out.println(\"hello\");&#125; 5.4 O(n²)代码示例： 12345for (i = 1; i &lt;= n; i++) &#123; for (j = 1; j &lt; n; j++) &#123; System.out.println(\"hello\"); &#125;&#125; 5.5 O(n³)道理同O(n²)一样 5.6 O(2ⁿ)O(2ⁿ)时间复杂度是比较慢的，例如典型的斐波拉契算法就是指数阶的表示： 123456public int fib(int n) &#123; if (n &lt;= 2) &#123; return n; &#125; return fib(n -1) + fib(n -2);&#125; 6、 空间复杂度时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。 常见的空间复杂度就是 O(1)、O(n)、O(n2) 7、复杂度分析的种类 最好情况时间复杂度：代码再最理想情况下执行的时间复杂度 最坏情况时间复杂度：代码再最糟糕的情况下，执行的时间复杂度 平均情况时间复杂度：加权平均值，即期望值，平均时间复杂度也可以叫做加权平均时间复杂度，或者期望时间复杂度，它只是在某些情况下才用得到 均摊时间复杂度：通过摊还分析法得到的时间复杂度，可以将其看作为一种特殊的平均时间复杂度 8、小结复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。","tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://liyf155.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"00 | 数据结构与算法学习笔记 | 什么是数据结构?什么是算法?","date":"2019-12-29T13:27:11.000Z","path":"2019/12/29/00-数据结构与算法学习笔记-什么是数据结构-什么是算法/","text":"什么是数据结构-什么是算法1.1 数据结构数据（data）是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。 数据元素（data element）是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。 数据对象(data Object)是性质相同的数据元素的集合，是数据的一个子集。 数据结构(data structure)是相互之间存在一种或多种特定关系的数据元素的集合。常见的数据结构有以下几种： 集合：结构中的数据元素之间除了”同属于一个集合“的关系外，别无其他关系 线性结构：结构中的数据元素之间存在一个对一个的关系 树形结构：结构中的数据元素之间存在一个对多个的关系 图状或网状结构：结构中的数据元素存在多个对多个的关系 1.2 算法算法（algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或多个操作；一个算法具有一下5个重要特性： 有穷性：一个算法必须总是在执行有穷步后结束，且每一步都可在有穷时间内完成 确定性：算法中每一条指令必须有确切的含义，读者丽姐时不会产生二义性 可行性：一个算法是能行的，即算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现的 输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象集合 输出：一个算法有一个或多个输出，这些输出是同输入有着某些特定关系的量 1.3 小结从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。下面是引用大牛的整理的一张数据结构算法的一张脑图，先熟悉一下。","tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://liyf155.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]}]